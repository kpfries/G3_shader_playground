[gd_resource type="VisualShader" load_steps=33 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 0.0531158, 0.230469, 0.122394, 1, 0.311159, 0.609375, 0.107117, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
output_port_for_preview = 0
texture = SubResource( 3 )

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=6]

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "world"

[sub_resource type="VisualShaderNodeTransformVecMult" id=8]
default_input_values = [ 0, Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), 1, Vector3( 0.1, 0.1, 0.1 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "Wind_Regularity"

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "wind_speed"

[sub_resource type="Gradient" id=11]

[sub_resource type="GradientTexture" id=12]
gradient = SubResource( 11 )

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = SubResource( 12 )

[sub_resource type="VisualShaderNodeVec3Constant" id=14]

[sub_resource type="VisualShaderNodeExpression" id=15]
size = Vector2( 560, 306 )
expression = "world_pos = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;"

[sub_resource type="VisualShaderNodeVectorDistance" id=16]

[sub_resource type="VisualShaderNodeVectorOp" id=17]

[sub_resource type="VisualShaderNodeScalarConstant" id=18]
constant = 1.5

[sub_resource type="VisualShaderNodeScalarOp" id=19]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=20]
function = 18

[sub_resource type="VisualShaderNodeVectorOp" id=21]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=23]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=24]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=25]
constant = 1.0

[sub_resource type="VisualShaderNodeVectorOp" id=26]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=27]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 0, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=28]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=29]

[sub_resource type="VisualShaderNodeExpression" id=30]
size = Vector2( 899, 271 )
expression = "output = cos(input * 3.142) * cos(input * speed) * 0.2"

[sub_resource type="VisualShaderNodeInput" id=31]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=32]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0, 1 ) ]
operator = 2

[resource]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_vtx_2;
uniform float Wind_Regularity;
uniform float wind_speed;
uniform sampler2D tex_frg_3;



void vertex() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Texture:2
	vec4 tex_vtx_2_read = texture(tex_vtx_2, n_out3p0.xy);
	vec3 n_out2p0 = tex_vtx_2_read.rgb;
	float n_out2p1 = tex_vtx_2_read.a;

// Input:15
	mat4 n_out15p0 = WORLD_MATRIX;

// ScalarUniform:17
	float n_out17p0 = Wind_Regularity;

// TransformVectorMult:16
	vec3 n_out16p0 = (n_out15p0 * vec4(vec3(n_out17p0), 1.0)).xyz;

// Input:7
	float n_out7p0 = TIME;

// ScalarOp:14
	float n_out14p0 = dot(n_out16p0, vec3(0.333333, 0.333333, 0.333333)) + n_out7p0;

// ScalarUniform:18
	float n_out18p0 = wind_speed;

// Expression:6
	float n_out6p0;
	n_out6p0 = 0.0;
	{
		n_out6p0 = cos(n_out14p0 * 3.142) * cos(n_out14p0 * n_out18p0) * 0.2
	}

// ScalarOp:11
	float n_out11p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) * n_out6p0;

// VectorOp:8
	vec3 n_in8p1 = vec3(1.00000, 0.00000, 1.00000);
	vec3 n_out8p0 = vec3(n_out11p0) * n_in8p1;

// Input:4
	vec3 n_out4p0 = VERTEX;

// VectorOp:5
	vec3 n_out5p0 = n_out8p0 + n_out4p0;

// Expression:21
	vec3 n_out21p0;
	n_out21p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out21p0 = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
	}

// Vector:20
	vec3 n_out20p0 = vec3(0.000000, 0.000000, 0.000000);

// VectorOp:29
	vec3 n_out29p0 = n_out21p0 - n_out20p0;

// Scalar:33
	float n_out33p0 = 1.000000;

// Distance:22
	float n_out22p0 = distance(n_out20p0, n_out21p0);

// Scalar:24
	float n_out24p0 = 1.500000;

// ScalarOp:31
	float n_out31p0 = n_out22p0 / n_out24p0;

// ScalarFunc:26
	float n_out26p0 = min(max(n_out31p0, 0.0), 1.0);

// ScalarOp:25
	float n_out25p0 = n_out33p0 - n_out26p0;

// VectorOp:32
	vec3 n_out32p0 = n_out29p0 * vec3(n_out25p0);

// VectorOp:34
	vec3 n_out34p0 = n_out2p0 * n_out32p0;

// VectorOp:35
	vec3 n_in35p1 = vec3(2.00000, 0.00000, 2.00000);
	vec3 n_out35p0 = n_out34p0 * n_in35p1;

// VectorOp:23
	vec3 n_out23p0 = n_out5p0 + n_out35p0;

// Output:0
	VERTEX = n_out23p0;

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out2p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out3p0;
	EMISSION = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1753, 403 )
modes/cull = 2
nodes/vertex/0/position = Vector2( 980, 200 )
nodes/vertex/2/node = SubResource( 13 )
nodes/vertex/2/position = Vector2( -440, 140 )
nodes/vertex/3/node = SubResource( 22 )
nodes/vertex/3/position = Vector2( -600, 200 )
nodes/vertex/4/node = SubResource( 28 )
nodes/vertex/4/position = Vector2( 20, 220 )
nodes/vertex/5/node = SubResource( 29 )
nodes/vertex/5/position = Vector2( 340, 200 )
nodes/vertex/6/node = SubResource( 30 )
nodes/vertex/6/position = Vector2( -1020, 420 )
nodes/vertex/6/size = Vector2( 899, 271 )
nodes/vertex/6/input_ports = "0,0,input;1,0,speed;"
nodes/vertex/6/output_ports = "0,0,output;"
nodes/vertex/6/expression = "output = cos(input * 3.142) * cos(input * speed) * 0.2"
nodes/vertex/7/node = SubResource( 31 )
nodes/vertex/7/position = Vector2( -1440, 480 )
nodes/vertex/8/node = SubResource( 32 )
nodes/vertex/8/position = Vector2( 160, 60 )
nodes/vertex/11/node = SubResource( 5 )
nodes/vertex/11/position = Vector2( -40, 80 )
nodes/vertex/14/node = SubResource( 6 )
nodes/vertex/14/position = Vector2( -1260, 440 )
nodes/vertex/15/node = SubResource( 7 )
nodes/vertex/15/position = Vector2( -1800, 340 )
nodes/vertex/16/node = SubResource( 8 )
nodes/vertex/16/position = Vector2( -1600, 340 )
nodes/vertex/17/node = SubResource( 9 )
nodes/vertex/17/position = Vector2( -1820, 420 )
nodes/vertex/18/node = SubResource( 10 )
nodes/vertex/18/position = Vector2( -1420, 600 )
nodes/vertex/20/node = SubResource( 14 )
nodes/vertex/20/position = Vector2( -1220, 1140 )
nodes/vertex/21/node = SubResource( 15 )
nodes/vertex/21/position = Vector2( -1360, 800 )
nodes/vertex/21/size = Vector2( 560, 306 )
nodes/vertex/21/input_ports = ""
nodes/vertex/21/output_ports = "0,1,world_pos;"
nodes/vertex/21/expression = "world_pos = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;"
nodes/vertex/22/node = SubResource( 16 )
nodes/vertex/22/position = Vector2( -600, 1160 )
nodes/vertex/23/node = SubResource( 17 )
nodes/vertex/23/position = Vector2( 780, 200 )
nodes/vertex/24/node = SubResource( 18 )
nodes/vertex/24/position = Vector2( -580, 820 )
nodes/vertex/25/node = SubResource( 19 )
nodes/vertex/25/position = Vector2( -60, 960 )
nodes/vertex/26/node = SubResource( 20 )
nodes/vertex/26/position = Vector2( -260, 1020 )
nodes/vertex/29/node = SubResource( 21 )
nodes/vertex/29/position = Vector2( -40, 800 )
nodes/vertex/31/node = SubResource( 23 )
nodes/vertex/31/position = Vector2( -440, 1060 )
nodes/vertex/32/node = SubResource( 24 )
nodes/vertex/32/position = Vector2( 180, 880 )
nodes/vertex/33/node = SubResource( 25 )
nodes/vertex/33/position = Vector2( -500, 720 )
nodes/vertex/34/node = SubResource( 26 )
nodes/vertex/34/position = Vector2( 400, 400 )
nodes/vertex/35/node = SubResource( 27 )
nodes/vertex/35/position = Vector2( 600, 320 )
nodes/vertex/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 5, 1, 8, 0, 5, 0, 7, 0, 14, 1, 14, 0, 6, 0, 15, 0, 16, 0, 16, 0, 14, 0, 17, 0, 16, 1, 18, 0, 6, 1, 2, 0, 11, 0, 11, 0, 8, 0, 21, 0, 22, 1, 20, 0, 22, 0, 5, 0, 23, 0, 23, 0, 0, 0, 26, 0, 25, 1, 31, 0, 26, 0, 21, 0, 29, 0, 20, 0, 29, 1, 25, 0, 32, 1, 29, 0, 32, 0, 24, 0, 31, 1, 22, 0, 31, 0, 33, 0, 25, 0, 2, 0, 34, 0, 32, 0, 34, 1, 34, 0, 35, 0, 35, 0, 23, 1, 6, 0, 11, 1 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -189, 222 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 0, 200 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 0, 3, 0, 0, 5 )
