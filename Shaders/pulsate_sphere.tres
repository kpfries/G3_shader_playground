[gd_resource type="VisualShader" load_steps=12 format=2]

[ext_resource path="res://Textures/noise01.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1.5, 1.5, 1.5 ) ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
function = 0

[resource]
code = "shader_type spatial;
uniform sampler2D tex_vtx_4;


void vertex() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = VERTEX;

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	vec4 tex_vtx_4_read = texture( tex_vtx_4 , UV.xy );
	n_out4p0 = tex_vtx_4_read.rgb;
	n_out4p1 = tex_vtx_4_read.a;

// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// Input:7
	float n_out7p0;
	n_out7p0 = TIME;

// ScalarFunc:9
	float n_out9p0;
	n_out9p0 = sin(n_out7p0);

// ScalarOp:13
	float n_in13p1 = 1.00000;
	float n_out13p0;
	n_out13p0 = n_out9p0 / n_in13p1;

// VectorOp:5
	vec3 n_out5p0;
	n_out5p0 = n_out2p0 * vec3(n_out13p0);

// VectorOp:6
	vec3 n_out6p0;
	n_out6p0 = n_out4p0 * n_out5p0;

// VectorOp:12
	vec3 n_out12p0;
	n_out12p0 = n_out3p0 + n_out6p0;

// VectorOp:14
	vec3 n_in14p1 = vec3(1.50000,1.50000,1.50000);
	vec3 n_out14p0;
	n_out14p0 = n_out12p0 / n_in14p1;

// Output:0
	VERTEX = n_out14p0;

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -892.5, 161 )
nodes/vertex/0/position = Vector2( 740, 360 )
nodes/vertex/2/node = SubResource( 4 )
nodes/vertex/2/position = Vector2( -900, 580 )
nodes/vertex/3/node = SubResource( 5 )
nodes/vertex/3/position = Vector2( -200, 100 )
nodes/vertex/4/node = SubResource( 6 )
nodes/vertex/4/position = Vector2( -700, 80 )
nodes/vertex/5/node = SubResource( 7 )
nodes/vertex/5/position = Vector2( -320, 700 )
nodes/vertex/6/node = SubResource( 8 )
nodes/vertex/6/position = Vector2( 20, 560 )
nodes/vertex/7/node = SubResource( 9 )
nodes/vertex/7/position = Vector2( -1280, 1160 )
nodes/vertex/9/node = SubResource( 10 )
nodes/vertex/9/position = Vector2( -1000, 1160 )
nodes/vertex/12/node = SubResource( 1 )
nodes/vertex/12/position = Vector2( 120, 200 )
nodes/vertex/13/node = SubResource( 2 )
nodes/vertex/13/position = Vector2( -640, 900 )
nodes/vertex/14/node = SubResource( 3 )
nodes/vertex/14/position = Vector2( 480, 60 )
nodes/vertex/connections = PoolIntArray( 2, 0, 5, 0, 7, 0, 9, 0, 5, 0, 6, 1, 4, 0, 6, 0, 6, 0, 12, 1, 3, 0, 12, 0, 9, 0, 13, 0, 13, 0, 5, 1, 12, 0, 14, 0, 14, 0, 0, 0 )
